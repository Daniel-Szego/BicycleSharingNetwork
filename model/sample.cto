/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.bicyclesharing.model

/*
 *  ENUMS
 */

enum AvailabilityEnum {
	o 	FREE
    o 	NOT_AVAILABLE
    o 	HIRED
}

enum StateEnum {
	o 	GOOD
    o 	IMPAIRED
    o	FAULTY
}

enum ColorEnum {
	o WHITE
    o BLACK
    o BLUE
    o GREEN 
    o GREY
    o RED
}

enum BikeEnum {
	o SPORT
    o CHOPPER
    o SCOOTER
}

/*
 *  CONCEPTS
 */

concept Wheel {
	o Integer Size optional 
    o String TireType optional 
}

concept Engine {
	o String EngineType
    o String EngineDescription
}

concept Address {
	o String Country
    o String City
    o String Street
    o Integer HauseNumber
}

/*
 *  ASSETS
 */

abstract asset HireableAsset identified by ObjectID {
	o String ObjectID
    o String ObjectName
    o AvailabilityEnum AssetAvailability default = "FREE"
    o StateEnum AssetSate default = "GOOD"
  	--> AssetOwner Owner optional
	--> User HiredBy optional  
}
  
asset Bycicle extends HireableAsset{
  	o Wheel BicycleWheel optional
  	o ColorEnum BicycleColor default = "RED" optional	
}

asset Bike extends HireableAsset{
  	o BikeEnum BikeType optional
  	o ColorEnum BicycleColor default = "RED" optional	
}


/*
 *  PARTICIPANTS
 */

abstract participant Actor identified by ActorID{
	o String ActorID
  	o Integer AccountBalance
}
  
participant User extends Actor {
	o String UserName 
  	o Address UserAddress optional
}
  
participant AssetOwner extends Actor {
	o String OwnerName
  	o Address OwnerAddress optional
}
  
  
/*
 *  TRANSACTIONS
 */
  
transaction InitTestData {
}  

transaction ClearData {
}  
  
transaction HireBycicle {
	--> Bycicle BycicleToHire
    --> User HireByMe
}

transaction NeedRepair {
	--> Bycicle BycicleToRepair
}

transaction Repaired {
	--> Bycicle BycicleToRepair
}


/*
 *  EVENTS
 */

 event BycicleHiredEvent {
	o String BycicleName
    o String HiringPersonName
}







